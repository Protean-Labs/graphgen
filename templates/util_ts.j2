import { 
  BigInt, 
  BigDecimal, 
  Address, 
  ethereum 
} from '@graphprotocol/graph-ts'

import {
  Transaction
} from './types/schema'

export const BigIntZero =  BigInt.fromI32(0)
export const BigIntOne =  BigInt.fromI32(1)
export const BigDecimalZero = BigDecimal.fromString('0')
export const BigDecimalOne = BigDecimal.fromString('1')

export function createTransaction(tx: ethereum.Transaction, block: ethereum.Block): Transaction {
  let txEntity = new Transaction(tx.hash.toHexString().toString())
  txEntity.txIndex = tx.index
  txEntity.from = tx.from
  txEntity.to = tx.to
  txEntity.blockNumber = block.number
  txEntity.blockTimestamp = block.timestamp
  txEntity.save()
  return txEntity
}

export function getCreateTransaction(tx: ethereum.Transaction, block: ethereum.Block): Transaction {
  let txEntity = Transaction.load(tx.hash.toHexString().toString())
  if (txEntity == null) {
    txEntity = createTransaction(tx, block)
  }
  return txEntity as Transaction
}